// BlockCrush (C) Jakob Wells
// BCGame.jack
// Game object for BlockCrush. Keeps track of internal objects, handles
// inputs, graphics, score, etc.

// Game Concept: Player block moves up/down on the left side of the 
// screen as walls of blocks move down the screen to "crush" them. Gain 
// points by slipping into gaps in the wall as the walls get faster.

class BCGame {
	field Wall wall1;
	field Wall wall2;
	field Wall wall3;
	field Block player;
	field Scoreboard score;
	field int rngCounter;

	/* Constructs a new Wall object given a gap position */
	constructor BCGame new() {
		return this;
	}

	/* Deallocate memory associated with this object */
	method void dispose () {
		do Memory.deAlloc(this);
		return;
	}

	method void start() {
		var int tmp; 
		let rngCounter = 0;
		do Output.moveCursor(3,11);
		do Output.printString("BLOCK CRUSH");
		do Output.moveCursor(5,10);
		do Output.printString("Press any key");
		do Output.moveCursor(7,5);
		do Output.printString("Press W and S to move up and down.");
		do Output.moveCursor(8,5);
		do Output.printString("  Avoid walls to increase score.  ");

		while(true) {
			let rngCounter = rngCounter + 1;

			let tmp = Keyboard.keyPressed();

			if (~(tmp = 0)) {
				do gameSetup();
				do gameLoop();
			}
		}

		return; // This will never actually *happen* though.
	}

	method void gameSetup() {
		do Screen.clearScreen();

		let wall1 = Wall.new(wallYGen(7),15);
		let wall2 = Wall.new(wallYGen(6),20);
		let wall3 = Wall.new(wallYGen(5),25);

		let player = Block.new(4);

		let score = Scoreboard.new();
		return;
	}

	method void gameLoop(){
		var int gameCntr;
		var bool keyHeld;
		var char key;
		var int gameSpeed;
		var int i;
		var bool metFloor;
		var int wallY;
		var int playY;


		let gameCntr = 30000;
		let keyHeld = false;

		while(true) {
			let key = Keyboard.keyPressed();

			if(~(key = 0)){				// Key Pressed?
				if(keyHeld = false){	// Has the key been let go recently?
					if(key = 87) {		// Is the key pressed "move up" ['w']?
						do player.moveUp();
						let rngCounter = rngCounter + 1;
						let keyHeld = true;
					}
					if(key = 83) {		// Is the key pressed "move down" ['s']?
						do player.moveDown();
						let rngCounter = rngCounter + 1;
						let keyHeld = true;
					}
				}
			}
			else {
				let keyHeld = false;		// No key pressed, so set held->0;
			}	

			if(gameCntr = 0) {
				let i = 0;
				while(i < 3) { 		// Actually a For loop. Odd this doesn't implement those.
					let metFloor = wallDrop(i);

					if(metFloor = true) {	// Game over? Or Score++?
						let wallY = wallGetY(i);
						let playY = player.getY();

						if(wallY = playY){
							do score.increase();
							do wallRespawn(i);
							do player.drawUpdate();
						}
						else {				// GAME OVER!
							do gameOver();	// Times up, clean up the game.
							return; 		// Kill the gameLoop and return to start.
						}
					}

					let i = i + 1;
				}
				
				let gameCntr = 30000 - (score.getScore() * 10);
			}

			let gameCntr = gameCntr - 1;
		}

		return;
	}

	method bool wallDrop(int index){
		if (index = 0){
			return wall1.fall();
		}
		if (index = 1){
			return wall2.fall();
		}
		if (index = 2){
			return wall3.fall();
		}

		return false;
	}

	method int wallGetY(int index){
		if (index = 0){
			return wall1.getY();
		}
		if (index = 1){
			return wall2.getY();
		}
		if (index = 2){
			return wall3.getY();
		}

		return 0;
	}

	method void wallRespawn(int index){
		if (index = 0){
			do wall1.respawn(wallYGen(score.getScore()));
		}
		if (index = 1){
			do wall2.respawn(wallYGen(score.getScore()));
		}
		if (index = 2){
			do wall3.respawn(wallYGen(score.getScore()));
		}

		return;
	}

	/* Wipe the screen, delete game objects, and setup for the "title" again */
	method void gameOver() {
		do Screen.clearScreen();

		do Output.moveCursor(3,11);
		do Output.printString("BLOCK CRUSH");

		do Output.moveCursor(5,10);
		do Output.printString("Press any key");

		do wall1.dispose();
		do wall2.dispose();
		do wall3.dispose();

		do player.dispose();
		do score.dispose();

		return;
	}

	/* Helper funciton to get a psuedo-random value from game conditions */
	method int wallYGen(int seed){
		var int output;
		let rngCounter = rngCounter + seed;
		let output = mod(rngCounter * seed,8);
		if (output < 0) {
			let output = 0;
		}
		if (output > 7) {
			let output = 7;
		}

		return output;
	}

	/* Helper function for taking the modulus of two values */
	method int mod(int a, int b) {
		return a - ((a / b) * b);
	}
}