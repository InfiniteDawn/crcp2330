// BlockCrush (C) Jakob Wells
// BCGame.jack
// Game object for BlockCrush. Keeps track of internal objects, handles
// inputs, graphics, score, etc.

// Game Concept: Player block moves up/down on the left side of the 
// screen as walls of blocks move down the screen to "crush" them. Gain 
// points by slipping into gaps in the wall as the walls get faster.

class BCGame {
	field Array walls;
	field Block player;
	field Scoreboard score;
	field int rngCounter;

	/* Constructs a new Wall object given a gap position */
	constructor BCGame new() {
		Return this;
	}

	/* Deallocate memory associated with this object */
	method void dispose () {
		do deAlloc(this);
		return;
	}

	method void start() {
		var int tmp; 
		let rngCounter = 0;
		do Output.moveCursor(3,11);
		do Output.printString("BLOCK CRUSH");
		do Output.moveCursor(5,10);
		do Output.printString("Press any key");
		do Output.moveCursor(7,5);
		do Output.printString("Press W and S to move up and down.");
		do Output.moveCursor(8,5);
		do Output.printString("  Avoid walls to increase score.  ");

		while(true) {
			let rngCounter = rngCounter + 1;

			let tmp = Keyboard.keyPressed();

			if (~(tmp = 0)) {
				do gameSetup();
				do gameLoop();
			}
		}

		return; // This will never actually *happen* though.
	}

	function void gameSetup() {
		do Screen.clearScreen();

		let walls = Array.new(5);
		let walls[0] = Wall.new(wallYGen(7),15);
		let walls[1] = Wall.new(wallYGen(6),19);
		let walls[2] = Wall.new(wallYGen(5),23);
		let walls[3] = Wall.new(wallYGen(4),27);
		let walls[4] = Wall.new(wallYGen(3),31);

		let player = Block.new(4);

		let score = Scoreboard.new(0);

		do player.draw();
		do score.draw();

		return;
	}

	function void gameLoop(){
		var int gameCntr;
		let gameCntr = 0;

		var bool keyHeld;
		let keyHeld = false;

		while(true) {
			var int key;
			let key = Keyboard.keyPressed();

			if(~(key = 0)){				// Key Pressed?
				if(keyHeld = false){	// Has the key been let go recently?
					if(key = 'w') {		// Is the key pressed "move up" ['w']?
						do player.moveUp();
						let rngCounter = rngCounter + 1;
					}
					if(key = 's') {		// Is the key pressed "move down" ['s']?
						do player.moveDown();
						let rngCounter = rngCounter + 1;

					}
				}
			}
			else {
				keyHeld = false;		// No key pressed, so set held->0;
			}	

			var int gameSpeed;
			gameSpeed = 50 - (score.getScore()/10);

			if(mod(gameCntr,gameSpeed) = 0) {
				var int i;
				let i = 0;
				while(i < 5){ 		// Actually a For loop. Odd this doesn't implement those.
					var int metFloor;
					let metFloor = walls[i].fall();

					if(metFloor = true) {	// Game over? Or Score++?
						var int wallY;
						var int playY;

						let wallY = walls[i].getY;
						let playY = player.getY;

						if(wallY = playY){
							do score.increase();
							do walls[i].respawn(wallYGen(score.getScore()));
						}
						else {				// GAME OVER!
							do gameOver();	// Times up, clean up the game.
							return; 		// Kill the gameLoop and return to start.
						}
					}

					let i = i + 1;
				}
			}

			do gameDraw();
			let gameCntr = gameCntr + 1;
		}

		return;
	}

	/* Draws the gameboard all at once. */
	function void gameDraw() {
		do Screen.clearScreen();
		do player.draw();
		do score.draw();

		return;
	}

	/* Wipe the screen, delete game objects, and setup for the "title" again */
	function void gameOver() {
		do Screen.clearScreen();

		do Output.moveCursor(3,11);
		do Output.printString("BLOCK CRUSH");

		do Output.moveCursor(5,10);
		do Output.printString("Press any key");

		do walls.dispose();
		do player.dispose();
		do score.dispose();

		return;
	}

	/* Helper funciton to get a psuedo-random value from game conditions */
	function int wallYGen(int seed){
		let rngCounter = rngCounter + seed;
		Return mod(rngCounter * seed,7);
	}

	/* Helper function for taking the modulus of two values */
	function int mod(int a, int b) {
		Return a - ((a / b) * b);
	}
}