// BlockCrush (C) Jakob Wells
// Wall.jack
// Wall object. 1-tile gap with rng height.

class Wall {
	
	field int gapY;
	field int gapX;


	/* Constructs a new Wall object given a gap position */
	constructor Wall new(int newY, int newX) {
		let gapY = newY;
		let gapX = newX; // Always starts off-screen, so no reason to draw yet.

		return this;
	}

	/* Deallocate memory associated with this object */
	method void dispose () {
		do Memory.deAlloc(this);
		return;
	}

	/* Update the object position on screen, returns "true" when object reaches floor level */
	method boolean fall () {
		let gapX = gapX - 1;
		do drawUpdate();

		if (gapX = 0) {
			return true;
		}
		else {
			return false; // An Out-of-Range value that denotes this wall hasn't reached the left yet.
		}
	}

	/* Return the position of the gap for "collision detection" purposes */
	method int getY () {
		return gapY;
	}

	/* Takes in a new gap position and moves wall to its initial X position */
	method void respawn (int newY) {
		let gapY = newY;
		let gapX = 16; // Always spawns *just* off-screen for next update.

		return;
	}

	/* Draws the wall to the screen, black for solid parts, white for the gap. */
	method void drawUpdate () {
		if ((gapX > -1) & (gapX < 15)) {

			// Clear the old wall graphic (if needed)
			if (gapX < 14) {
				do Screen.setColor(false);
				do Screen.drawRectangle(gapX*32+31,0,gapX*32+63,255);
			}
			// Draw the new wall graphic
			do Screen.setColor(true);
			do Screen.drawRectangle(gapX*32,0,gapX*32+31,255);
			do Screen.setColor(false);
			do Screen.drawRectangle(gapX*32,gapY*32,gapX*32+31,gapY*32+31);
		}

		return;
	}
}