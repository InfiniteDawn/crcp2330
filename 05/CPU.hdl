// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Reg A Input Mux
    Mux16(a=instruction,b=oldM,sel=instruction[15],out=toA);

    // Reg A
    ARegister(in=toA,load=loadRegA,out=regAOut,
        out[0..14]=addressM,out[0..14]=newAddress);

    // Reg D
    DRegister(in=oldM,load=loadRegD,out=regDOut);

    // ALU A/M Input Mux
    Mux16(a=regAOut,b=inM,sel=passInM,out=toAMInput);

    // Program Counter
    PC(in[0..14]=newAddress,in[15]=false,load=loadJump,
        inc=incPC,reset=reset,out[0..14]=pc);

    // ALU
    ALU(x=regDOut,y=toAMInput,zx=instruction[11],nx=instruction[10],
        zy=instruction[9],ny=instruction[8],f=instruction[7],
        no=instruction[6],out=outM,out=oldM,zr=zr,ng=ng);

    // Control Logic
    Not(in=instruction[15],out=loadInValue);
    Or(a=loadInValue,b=instruction[5],out=loadRegA);
    And(a=instruction[15],b=instruction[4],out=loadRegD);
    And(a=instruction[15],b=instruction[3],out=writeM);

    And(a=instruction[15],b=instruction[12],out=passInM);

    // Figure out whether to load the Jump or increment.
    Or(a=ng,b=zr,out=LTE);
    Not(in=LTE,out=GT);

    And(a=instruction[0],b=GT,out=JmpGT);
    And(a=instruction[1],b=zr,out=JmpEQ);
    And(a=instruction[2],b=ng,out=JmpLT);

    Or(a=JmpLT,b=JmpEQ,out=JmpLTE);
    Or(a=JmpLTE,b=JmpGT,out=jumpBit);
    
    And(a=jumpBit,b=instruction[15],out=loadJump);
    Not(in=loadJump,out=incPC);
}